/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbafeb029bdd95510990bea
*
* You will get 10% discount for each one of your friends
* 
*/
package com.testowyprojekt.db.testowyprojekt_db.entity.base;

/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
                                                                                   
 * DO NOT EDIT THIS FILE!! 
 *
 *  FOR CUSTOMIZE VindicationCaseBase PLEASE EDIT ../VindicationCase.java
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER CODE GENERATION --
 * 
 */
 

/**
 * This is the model of VindicationCase object
 * 
 */

import javax.persistence.GeneratedValue;
import javax.persistence.MappedSuperclass;
import javax.persistence.Id;
import javax.persistence.Column;
import java.util.Date;
import javax.persistence.ManyToOne;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.FetchType;
import java.util.stream.Collectors;
import java.math.BigDecimal;
import com.testowyprojekt.db.testowyprojekt_db.entity.VindicationCase;
// Import relations
import com.testowyprojekt.db.testowyprojekt_db.entity.Debtor;



import com.testowyprojekt.db.testowyprojekt_db.entity.Document;



@MappedSuperclass
public class VindicationCaseBase {
	
	@Id
	@GeneratedValue
	private Long _id;
	
	// Attributes
	@Column()
    private BigDecimal ActualDebt;
	@Column()
    private Date AddDate;
	@Column()
    private BigDecimal StartingDebt;
	
	// Relations Debtor
	@ManyToOne(fetch = FetchType.LAZY)
	private Debtor Debtor;
	
	
	// Relations m:m Document
	@ManyToMany()
	@JoinTable(name="VindicationCase_Document",
		joinColumns = @JoinColumn(name="VindicationCase_ID"),
		inverseJoinColumns = @JoinColumn(name="Document_ID")
			)
	private List<Document> Document = new ArrayList<>();
	
	
	public Long get_id() {
		return _id;
	}

	public void set_id(Long id) {
		this._id = id;
	}
	
	public BigDecimal getActualDebt() {
		return ActualDebt;
	}

	public void setActualDebt(BigDecimal ActualDebt) {
		this.ActualDebt = ActualDebt;
	}
	public Date getAddDate() {
		return AddDate;
	}

	public void setAddDate(Date AddDate) {
		this.AddDate = AddDate;
	}
	public BigDecimal getStartingDebt() {
		return StartingDebt;
	}

	public void setStartingDebt(BigDecimal StartingDebt) {
		this.StartingDebt = StartingDebt;
	}
    
	public void setDebtor(String Debtor) {
		this.Debtor = new Debtor(Debtor);
	}

	public Debtor getDebtor() {
		return Debtor;
	}
	

    
	
	public List<Document> getDocument() {
		return this.Document;
	}

	public void addDocument(Document Document) {
		this.Document.add(Document);
	}

	public void setDocument(List<String> document) {
		this.Document = document.stream()
			.map(id -> new Document(id))
			.collect(Collectors.toList());
	}

	public void removeDocument(Document Document) {
		this.Document.remove(Document);
	}
	
}