/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbafeb029bdd95510990bea
*
* You will get 10% discount for each one of your friends
* 
*/
package com.testowyprojekt.controller.base;

import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.http.ResponseEntity;
import org.modelmapper.ModelMapper;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.springframework.security.access.annotation.Secured;
import org.springframework.beans.factory.annotation.Autowired;
import com.testowyprojekt.db.testowyprojekt_db.service.DocumentService;
import com.testowyprojekt.db.testowyprojekt_db.entity.Document;
import com.testowyprojekt.db.testowyprojekt_db.dtos.DocumentDto;

//IMPORT RELATIONS

import com.testowyprojekt.db.testowyprojekt_db.service.VindicationCaseService;


public class DocumentBaseController {
    
    @Autowired
	DocumentService documentService;

	
	@Autowired
	VindicationCaseService vindicationcaseService;
	

	@Autowired
	private ModelMapper modelMapper;



//CRUD METHODS


    //CRUD - CREATE
    @Secured({ "ROLE_PRIVATE_USER" })
	@PostMapping("/document")
	public ResponseEntity<DocumentDto> insert(@RequestBody Document obj) {
				
		//external relation VindicationCase
		if (obj.getVindicationCase() != null) {
			obj.getVindicationCase().forEach(vindicationcase -> {
				vindicationcase.addDocument(obj);
				vindicationcaseService.insert(vindicationcase);
			});
		}
		
		
		return ResponseEntity.ok().body(convertToDto(documentService.insert(obj)));
	}

	
    //CRUD - REMOVE
    @Secured({ "ROLE_PRIVATE_USER" })
	@DeleteMapping("/document/{id}")
	public ResponseEntity<Void> delete(@PathVariable("id") Long id) {
		Document documentSelected = documentService.getOne(id);
		
		//external relation VindicationCase
		if (documentSelected.getVindicationCase() != null) {
			documentSelected.getVindicationCase().forEach(vindicationcase -> {
				vindicationcase.getDocument().removeIf(document -> document.get_id() == documentSelected.get_id());
				vindicationcaseService.insert(vindicationcase);
			});
		}
		
		documentService.delete(id);
		return ResponseEntity.ok().build();
	}
	
	
    //CRUD - GET ONE
    @Secured({ "ROLE_PRIVATE_USER" })
	@GetMapping("/document/{id}")
	public ResponseEntity<DocumentDto> get(@PathVariable("id") Long id) {
		Document documentSelected = documentService.getOne(id);
		return ResponseEntity.ok().body(convertToDto(documentSelected));
	}
	
	
    //CRUD - GET LIST
    @Secured({ "ROLE_PRIVATE_USER" })
	@GetMapping("/document")
	public ResponseEntity<List<DocumentDto>> getList() {
		List<Document> list = documentService.getAll();
		List<DocumentDto> listDto = list.stream()
				.map(document -> convertToDto(document))
				.collect(Collectors.toList());
		return ResponseEntity.ok().body(listDto);
	}


    //CRUD - EDIT
    @Secured({ "ROLE_PRIVATE_USER" })
	@PostMapping("/document/{id}")
	public ResponseEntity<DocumentDto> update(@RequestBody Document obj, @PathVariable("id") Long id) {
	    
		//external relation VindicationCase
		if (obj.getVindicationCase() != null) {
			obj.getVindicationCase().forEach(vindicationcase -> {
				vindicationcase.addDocument(obj);
				vindicationcaseService.insert(vindicationcase);
			});
		}
		
		
		return ResponseEntity.ok().body(convertToDto(documentService.insert(obj)));
	}
	


/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  Custom.js
 */


	private DocumentDto convertToDto(Document document) {
		DocumentDto documentDto = modelMapper.map(document, DocumentDto.class);
		return documentDto;
	}
}
