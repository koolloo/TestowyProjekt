/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5dbafeb029bdd95510990bea
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import Button from "@material-ui/core/Button";
import { DateTimePicker } from "material-ui-pickers";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import InputLabel from "@material-ui/core/InputLabel";
import FormControl from "@material-ui/core/FormControl";
import Chip from "@material-ui/core/Chip";
import Input from "@material-ui/core/Input";

// Custom Actions


// START IMPORT ACTIONS
import VindicationCaseActions from "../redux/actions/VindicationCaseActions";
import DebtorActions from "../redux/actions/DebtorActions";
import DocumentActions from "../redux/actions/DocumentActions";

// END IMPORT ACTIONS

/** APIs

* actionsVindicationCase.create
*	@description CRUD ACTION create
*
* actionsVindicationCase.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsDebtor.list
*	@description CRUD ACTION list
*
* actionsDocument.list
*	@description CRUD ACTION list
*
* actionsVindicationCase.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*

**/

class VindicationCaseEdit extends Component {
  // Init vindicationcase
  constructor(props) {
    super(props);
    this.state = {
      vindicationcase: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsVindicationCase.loadVindicationCase(this.props.match.params.id);
    }
    
    this.props.actionsDebtor.loadDebtorList();
    this.props.actionsDocument.loadDocumentList();
  }

  // Insert props vindicationcase in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      vindicationcase: props.vindicationcase
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.vindicationcase._id) {
      this.props.actionsVindicationCase.saveVindicationCase(this.state.vindicationcase).then(data => {
        this.props.history.push("/vindicationcases/");
      });
    } else {
      this.props.actionsVindicationCase.createVindicationCase(this.state.vindicationcase).then(data => {
        this.props.history.push("/vindicationcases/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>VindicationCase Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="ActualDebt"
            label="ActualDebt"
            value={this.state.vindicationcase.ActualDebt || ""}
            onChange={Utils.handleChange.bind(this, "vindicationcase")}
            margin="normal"
            fullWidth
          />
          
          <DateTimePicker
            id="AddDate"
            label="AddDate"
            className="mt-20 mb-20"
            ampm={false}
            value={
              this.state.vindicationcase.AddDate
                ? new Date(this.state.vindicationcase.AddDate)
                : null
            }
            onChange={Utils.handleChangeDate.bind(this, "vindicationcase", "AddDate")}
            fullWidth
            autoOk
            disableFuture
          />
          
          
          <TextField
            id="StartingDebt"
            label="StartingDebt"
            value={this.state.vindicationcase.StartingDebt || ""}
            onChange={Utils.handleChange.bind(this, "vindicationcase")}
            margin="normal"
            fullWidth
          />
          
          {/* RELATIONS */}

          <h2 className="mb-20">Relations</h2>
          
          {/* Relation 1:m Debtor with Debtor */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel shrink htmlFor="Debtor">
              Debtor
            </InputLabel>
            <Select
              value={this.state.vindicationcase.Debtor || ""}
              onChange={Utils.handleChangeSelect.bind(this, "vindicationcase")}
              inputProps={{
                id: "Debtor",
                name: "Debtor"
              }}
              fullWidth
            >
              <MenuItem value="">
                <em>None</em>
              </MenuItem>
              {this.props.listDebtor && this.props.listDebtor.map(row => (
                <MenuItem value={row._id} key={row._id}>
                  {row._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          
          {/* Relation m:m Document with Document */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel htmlFor="Document">Document</InputLabel>
            <Select
              multiple
              value={this.state.vindicationcase.Document || []}
              onChange={Utils.handleChangeSelect.bind(this, "vindicationcase")}
              input={<Input id="Document" name="Document" />}
              renderValue={selected => (
                <div>
                  {selected.map(value => (
                    <Chip key={value} label={value} />
                  ))}
                </div>
              )}
            >
              {this.props.listDocument && this.props.listDocument.map(item => (
                <MenuItem
                  key={item._id}
                  value={item._id}
                  style={{
                    fontWeight:
                      this.state.vindicationcase.Document &&
                      this.state.vindicationcase.Document.indexOf(item._id) === -1
                        ? "regular"
                        : "bold"
                  }}
                >
                  {item._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/vindicationcases/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsVindicationCase: bindActionCreators(VindicationCaseActions, dispatch),
    actionsDebtor: bindActionCreators(DebtorActions, dispatch),
    actionsDocument: bindActionCreators(DocumentActions, dispatch),
  };
};

// Validate types
VindicationCaseEdit.propTypes = { 
  actionsVindicationCase: PropTypes.object.isRequired,
  actionsDebtor: PropTypes.object.isRequired,
  actionsDocument: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    vindicationcase: state.VindicationCaseEditReducer.vindicationcase,
    listDebtor: state.VindicationCaseEditReducer.listDebtor,
    listDocument: state.VindicationCaseEditReducer.listDocument
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(VindicationCaseEdit);
